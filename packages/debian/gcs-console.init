#! /bin/sh
### BEGIN INIT INFO
# Provides:          gcs-console
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Groonga CloudSearch Console's init script
# Description:       Groonga CloudSearch Console is an administration Web
#                    interface for Groonga CloudSearch
### END INIT INFO

# Author: Kouhei Sutou <kou@clear-code.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="an administration Web interface for Groonga CloudSearch"
NAME=gcs-console
DAEMON=/usr/sbin/$NAME
LIB_DIR=/usr/lib/`dpkg-architecture -qDEB_HOST_MULTIARCH`
FOREVER=$LIB_DIR/gcs-console/node_modules/.bin/forever
LOG_DIR=/var/log/$NAME
USER=gcs-console
GROUP=gcs-console
PORT=7576
PIDFILE=/var/run/gcs-console/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
NODE_ENV=production
OPTION_ARGS=""
START_STOP_DAEMON_ARGS=""
ENABLE="no"

export NODE_ENV

DEFAULT_FILE=/etc/default/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0
[ -x "$FOREVER" ] || exit 0

# Read configuration variable file if it is present
[ -r $DEFAEULT_FILE ] && . $DEFAULT_FILE

[ "$ENABLE" = "yes" ] || exit 0

FOREVER_ARGS="--append --pidFile ${PIDFILE}"
FOREVER_ARGS="$FOREVER_ARGS -l $LOG_DIR/forever.log"
FOREVER_ARGS="$FOREVER_ARGS -o $LOG_DIR/output.log"
FOREVER_ARGS="$FOREVER_ARGS -e $LOG_DIR/error.log"
DAEMON_ARGS=""
if [ -n "${PORT}" ]; then
    DAEMON_ARGS="${DAEMON_ARGS} --port ${PORT}"
fi

mkdir -p $(dirname ${PIDFILE})
if [ -n "${USER}" ]; then
    if ! getent passwd | grep -q "^${USER}:"; then
	echo "$0: user for running Groonga CloudSearch Console doesn't exist: ${USER}" >&2
	exit 1
    fi
    chown -R ${USER} $(dirname ${PIDFILE})
    START_STOP_DAEMON_ARGS="${START_STOP_DAEMON_ARGS} --user ${USER}"
fi
if [ -n "${GROUP}" ]; then
    if ! getent group | grep -q "^${GROUP}:"; then
	echo "$0: group for running Groonga CloudSearch Console doesn't exist: ${GROUP}" >&2
	exit 1
    fi
    START_STOP_DAEMON_ARGS="${START_STOP_DAEMON_ARGS} --group ${GROUP}"
fi
DAEMON_ARGS="${DAEMON_ARGS} ${OPTION_ARGS}"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec \
	$FOREVER $START_STOP_DAEMON_ARGS --test > /dev/null || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec \
	$FOREVER $START_STOP_DAEMON_ARGS -- \
	start $FOREVER_ARGS $DAEMON $DAEMON_ARGS || return 2
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    [ $FOREVER list $FOREVER_ARGS | \
	grep --quiet "No forever processes running" ] && return 1

    [ $FOREVER stop $FOREVER_ARGS $DAEMON 2>&1 | \
	grep --quiet "error" ] && return 2

    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
	--pidfile $PIDFILE --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 \
	--exec $FOREVER
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    $FOREVER restart $FOREVER_ARGS $DAEMON $DAEMON_ARGS
    return 0
}

do_status() {
    if [ -z "${ADDRESS}" ]; then
	ADDRESS="localhost"
    fi
    send_command status
    return $?
}

case "$1" in
    start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
	    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
	    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
    reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
    restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	    0|1)
		do_start
		case "$?" in
		    0) log_end_msg 0 ;;
		    1) log_end_msg 1 ;; # Old process is still running
		    *) log_end_msg 1 ;; # Failed to start
		esac
		;;
	    *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
    *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
